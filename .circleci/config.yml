version: 2.1

aliases:
  - &appdir
    working_directory: "nms/app"
  - &only_master
    filters:
      branches:
        only: master
  - &master_and_develop
    filters:
      branches:
        only:
          - master
          - develop
  - &lte_build_verify
    paths: "orc8r lte"
  - &federated_build_verify
    paths: "orc8r lte feg"
  - &all_gateways_build_verify
    paths: "orc8r lte feg cwf"
  - &nms_build_verify
    paths: "nms"
  - &orc8r_build_verify
    paths: "orc8r"

executors:
  node:
    docker:
      - image: circleci/node:10-buster-browsers-legacy

orbs:
  artifactory: circleci/artifactory@0.0.7

  docker:
    commands:
      install-dc:
        parameters:
          compose_version:
            description: Docker-compose version to install
            type: string
            default: '1.25.4'
        steps:
          - run:
              name: Install Docker Compose
              command: |
                sudo curl -L https://github.com/docker/compose/releases/download/<<parameters.compose_version>>/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
                sudo chmod +x ~/docker-compose
                sudo mv ~/docker-compose /usr/local/bin/docker-compose

  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                if [ "${CIRCLE_BRANCH}" = "v1.3" ]; then
                  echo "Determinator does not run on release branch"
                  exit 0
                fi

                paths=".circleci circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt

commands:
  run-with-retry:
    description: Run command with retry
    parameters:
      command:
        description: Command to run
        type: string
      workdir:
        description: Path to cd into
        type: string
      retry-count:
        description: Number of retry
        type: integer
        default: 3
      sleep:
        description: Wait duration until next retry
        type: integer
        default: 5
    steps:
      - run: |
          retry() {
             MAX_RETRY=<< parameters.retry-count >>
             n=0
             until [ $n -ge $MAX_RETRY ]
             do
                "$@" && break
                n=$[$n+1]
                sleep << parameters.sleep >>
             done
             if [ $n -ge $MAX_RETRY ]; then
               echo "failed: ${@}" >&2
               exit 1
             fi
          }
          cd << parameters.workdir >>
          retry << parameters.command >>

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "nms/app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: |
            if [ $(node -v) == 'v6.1.0' ]; then
              source $NVM_DIR/nvm.sh
              nvm install stable
            fi
            yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "nms/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

  apt-install-yarn:
    steps:
      - run:
          <<: *appdir
          command: |
            sudo apt-get install -y apt-transport-https
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update -y
            sudo apt-get install -y yarn

  apt-install-chrome:
    steps:
      - run:
          <<: *appdir
          command: |
            # Install latest chrome dev package
            # Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
            # installs, work.
            curl -sS https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
            sudo apt-get update -y
            sudo apt-get install -y google-chrome-stable libxss1 --no-install-recommends
            sudo rm -rf /var/lib/apt/lists/*


  tag-push-docker:
    description: Tag docker image and push it
    parameters:
      tag:
        description: Containers to tag and push
        type: string
        default: ${CIRCLE_SHA1:0:8}
      registry:
        description: Registry to push to
        type: string
        default: ${DOCKER_REGISTRY}
      username:
        description: Username to log in as
        type: string
        default: ${DOCKER_USERNAME}
      password:
        description: Password to log in using
        type: string
        default: ${DOCKER_PASSWORD}
      project:
        description: Project images are linked to
        type: string
        default: ""
      images:
        description: Images you want to tag and push separated by |
        type: string
      tag-latest:
        default: false
        type: boolean
    steps:
      - run: |
          if [ "${CIRCLE_BRANCH}" != "v1.3" ]; then
            echo "Push only happens for release branch"
            exit 0
          fi

          DOCKER_REGISTRY="<< parameters.registry >>"
          DOCKER_USERNAME="<< parameters.username >>"
          DOCKER_PASSWORD="<< parameters.password >>"

          docker login "${DOCKER_REGISTRY}" -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"

          IMAGES="<< parameters.images >>"
          IMAGES_ARRAY=($(echo $IMAGES | tr "|" "\n"))
          PROJECT=<< parameters.project >>
          TAG=<< parameters.tag >>
          TAG_LATEST=<< parameters.tag-latest >>
          for IMAGE in "${IMAGES_ARRAY[@]}"; do
            IMAGE_TOSEARCH=$IMAGE
            if [ ! -z $PROJECT ]; then
              IMAGE_TOSEARCH="${PROJECT}_${IMAGE}"
            fi
            IMAGE_ID=$(docker images "$IMAGE_TOSEARCH:latest" --format "{{.ID}}")
            docker tag "$IMAGE_ID" "${DOCKER_REGISTRY}/$IMAGE:$TAG"
            if [ "$TAG_LATEST" = true ]; then
              docker tag "$IMAGE_ID" "${DOCKER_REGISTRY}/$IMAGE:latest"
            fi
            echo "Pushing ${DOCKER_REGISTRY}/$IMAGE:$TAG"
            docker push "${DOCKER_REGISTRY}/$IMAGE:$TAG"
          done

  magma_integ_test:
    parameters:
      stack:
        description: Which stack to run integ tests for (cwf, lte)
        type: string
      test:
        description: Should run tests (True, False)
        type: string
      build:
        description: Should build deployment artifacts (True, False)
        type: string
      deploy:
        description: Should deploy artifacts (True, False)
        type: string
    steps:
      - checkout
      - build/determinator:
          <<: *lte_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y openvpn
      - run:
          name: Configure and start VPN client
          command: |
            echo $MAGMA_OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
      - run:
          name: Decode and set secrets
          command: |
            cd ${MAGMA_ROOT}/circleci
            echo $MAGMA_NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $MAGMA_API_CERT | base64 -d - > ci_operator.pfx
            openssl pkcs12 -in ci_operator.pfx -nocerts -out ci_operator.key.pem -nodes -passin pass:
            openssl pkcs12 -in ci_operator.pfx -nokeys -out ci_operator.pem -passin pass:

            echo $MAGMA_ROOTCA | base64 -d - > rootCA.pem
            echo $MAGMA_CONTROL_PROXY | base64 -d - > control_proxy.yml

            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv MAGMA_DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv MAGMA_DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - run:
          name: Select python 3.7.0
          command: pyenv global 3.7.0
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
      - run:
          name: Run remote integ test
          command: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab <<parameters.stack>> integ_test:repo=${CIRCLE_REPOSITORY_URL},branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1},run_integ_test=<<parameters.test>>,build_package=<<parameters.build>>,deploy_artifacts=<<parameters.deploy>>

            mkdir -p versions
            cp *_version versions || true
      - store_artifacts:
          path: /tmp/logs
      - run:
          name: Double-check that the node is freed
          command: |
            cd ${MAGMA_ROOT}/circleci
            lease_id=$(cat lease_id.out)
            lease_node=$(cat lease_node.out)
            curl -X POST "https://api-staging.magma.etagecom.io/magma/v1/ci/nodes/${lease_node}/release/${lease_id}" -k --key ci_operator.key.pem --cert ci_operator.pem || true
          when: always
      - magma_slack_notify

  magma_slack_notify:
    description: Notify Slack on magma job failure
    parameters:
      channel:
        type: string
        default: "#magma_ci"
    steps:
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
          name: Slack - Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
          name: Slack - Setting Success Condition
          when: on_success
      - run:
          name: Send message to Slack
          command: |
            if [ "$SLACK_BUILD_STATUS" != "fail" ] || [ "$CIRCLE_BRANCH" != "master" ]; then
              echo "This command will only execute on failure on master."
              exit 0
            fi

            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            rel_time=$(git show -s --format='%cr')
            abs_time=$(git show -s --format='%cd')
            slack_channel=<< parameters.channel >>
            gh_text="<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}> ${rel_time} (${abs_time})"

            pretext="Job \`${CIRCLE_JOB}\` #${CIRCLE_BUILD_NUM} on branch \`${CIRCLE_BRANCH}\` of ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} failed. Check the <${CIRCLE_BUILD_URL}|build logs> for details."
            color="#8b0902"

            slack_data=$(cat \<<EOF
            {
              "channel": "${slack_channel}",
              "text": "*CircleCI Job Failure*",
              "attachments": [
                {
                  "color": "${color}",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI job failure notification",
                  "fields": [
                    {
                      "title": "Revision",
                      "value": "${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            echo $slack_data
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK}"
          when: always

  persist-githash-version:
    parameters:
      file_prefix:
        type: string
    steps:
      - run:
          name: Create version file
          command: |
            cd ${MAGMA_ROOT}/circleci
            mkdir -p versions
            echo "${CIRCLE_SHA1:0:8}" > versions/<< parameters.file_prefix >>_version

  notify-magma:
    description: Notify Slack when an artifact is published
    parameters:
      artifact_name:
        description: Name of the artifact to include in the message
        type: string
      version_path:
        description: Path to file that will contain the artifact version
        type: string
    steps:
      - run:
          name: Send slack message
          command: |
            if [ "${CIRCLE_BRANCH}" != "v1.3" ]; then
              exit 0
            fi

            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            rel_time=$(git show -s --format='%cr')
            abs_time=$(git show -s --format='%cd')
            gh_text="<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}> ${rel_time} (${abs_time})"

            if [ -f ${MAGMA_ROOT}/circleci/<< parameters.version_path >> ]; then
              ver=$(cat ${MAGMA_ROOT}/circleci/<< parameters.version_path >>)
            else
              ver="Unknown artifact version (this should never happen!)"
            fi

            pretext="Production artifact has been published. Promote or deploy it by following the appropriate oncall procedures."

            slack_data=$(cat \<<EOF
            {
              "channel": "#ci-publish",
              "text": "*<< parameters.artifact_name >> Artifact Has Been Published*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI workflow success notification",
                  "fields": [
                    {
                      "title": "Artifact Version",
                      "value": "\`${ver}\`",
                      "short": false
                    },
                    {
                      "title": "Revision",
                      "value": "${gh_text}",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "\`${CIRCLE_BRANCH}\`",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK}"

jobs:
  ### CLOUD

  cloud-test:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -t
      - magma_slack_notify

  insync-checkin:
    machine:
      image: ubuntu-1604:201903-01
      #docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -g
      - run: sudo chown -R circleci $MAGMA_ROOT/*
      - run: git add .
      - run: git status
      - run: git diff-index --quiet HEAD
      - magma_slack_notify

  orc8r-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MODULE_DIR=/home/circleci/project
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -a --nocache --parallel
      - tag-push-docker:
          project: orc8r
          images: "nginx|controller"
      - persist-githash-version:
          file_prefix: orc8r
      - notify-magma:
          artifact_name: Orchestrator Images
          version_path: versions/orc8r_version
      - magma_slack_notify

  ### GATEWAY

  orc8r-gateway-test:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - build/determinator:
          <<: *orc8r_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/gateway/go
            go test ./...
            go vet ./...
      - magma_slack_notify

  feg-precommit:
    docker:
      - image: circleci/golang:1.13-stretch-node-browsers-legacy
    resource_class: medium+
    environment:
      - GO111MODULE=on
    steps:
      - checkout
      - build/determinator:
          <<: *federated_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: make feg precommit
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway precommit
      - magma_slack_notify

  feg-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    resource_class: large
    environment:
      - MAGMA_ROOT=/home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *federated_build_verify
      - run:
          command: |
            cd ${MAGMA_ROOT}/feg/gateway/docker
            DOCKER_REGISTRY=feg_ docker-compose build --parallel
      - tag-push-docker:
          project: feg
          images: "gateway_go|gateway_python"
          registry: $DOCKER_FEG_REGISTRY
      - persist-githash-version:
          file_prefix: feg
      - notify-magma:
          artifact_name: FeG
          version_path: versions/feg_version
      - magma_slack_notify

  cwag-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway/integ_tests precommit
      - magma_slack_notify

  cwf-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - build/determinator:
          <<: *all_gateways_build_verify
      - magma_integ_test:
          stack: cwf
          test: 'True'
          build: 'False'
          deploy: 'False'

  cwag-deploy:
    parameters:
      tag:
        description: Containers tag
        type: string
        default: ${CIRCLE_SHA1:0:8}
      images:
        description: Images to deploy
        type: string
        default: 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined'
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - DOCKER_REGISTRY=cwf_
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - run:
          name: Build CWAG containers
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway/docker
            docker-compose -f docker-compose.yml -f docker-compose.override.yml build --parallel
      - tag-push-docker:
          project: cwf
          images: <<parameters.images>>
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
      - persist-githash-version:
          file_prefix: cwag
      - notify-magma:
          artifact_name: CWAG
          version_path: versions/cwag_version
      - magma_slack_notify

  lte-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - PYTHON_BUILD=${MAGMA_ROOT}/build
      - PIP_CACHE_HOME=${MAGMA_ROOT}/.pipcache
      - MAGMA_DEV_MODE=1
      - SKIP_SUDO_TESTS=1
      - CODEGEN_ROOT=/home/circleci/project/.codegen
      - SWAGGER_CODEGEN_JAR=/home/circleci/project/.codegen/swagger-codegen-cli.jar
    steps:
      - checkout
      - build/determinator:
          <<: *lte_build_verify
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libsystemd-dev pkg-config curl zip unzip
      - run: sudo apt-get install -y virtualenv python-babel python-dev build-essential python3-setuptools python-setuptools autogen autoconf libtool python3-apt python3-aioeventlet python3-requests python3-pip python-protobuf
      - run:
          command: |
            sudo curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            sudo unzip protoc3.zip -d protoc3
            sudo mv protoc3/bin/protoc /bin/protoc
            sudo chmod a+rx /bin/protoc
            sudo mv protoc3/include/google /usr/include/
            sudo chmod -R a+Xr /usr/include/google
            sudo rm -rf protoc3.zip protoc3
            mkdir ${CODEGEN_ROOT}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O $SWAGGER_CODEGEN_JAR
            make -C $MAGMA_ROOT/lte/gateway/python test_all
      - magma_slack_notify

  lte-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - build/determinator:
          <<: *lte_build_verify
      - magma_integ_test:
          stack: lte
          test: 'True'
          build: 'False'
          deploy: 'False'

  lte-agw-deploy:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - magma_integ_test:
          stack: lte
          test: 'False'
          build: 'True'
          deploy: 'True'
      - notify-magma:
          artifact_name: LTE AGW
          version_path: versions/magma_version

  ## CWF OPERATOR

  cwf-operator-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - build/determinator:
          paths: "cwf/k8s"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/k8s/cwf_operator
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator
            make -C ${MAGMA_ROOT}/cwf/k8s/cwf_operator precommit
      - magma_slack_notify

  cwf-operator-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
      - MAGMA_ROOT=/home/circleci/project
    steps:
      - checkout
      - build/determinator:
          paths: "cwf/k8s"
      - docker/install-dc
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator/docker
            DOCKER_REGISTRY=cwf_ docker-compose build --parallel
      - tag-push-docker:
          project: cwf
          images: "operator"
          registry: $DOCKER_MAGMA_REGISTRY
      - persist-githash-version:
          file_prefix: cwf_operator
      - notify-magma:
          artifact_name: CWF Operator
          version_path: versions/cwf_operator_version
      - magma_slack_notify

  ### NMS

  nms-flow-test:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})
      - yarn-install
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow
      - magma_slack_notify

  eslint:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint ./
      - magma_slack_notify

  nms-yarn-test:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci
      - magma_slack_notify

  nms-e2e-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - NMS_ROOT=${MAGMA_ROOT}/nms/app/packages/magmalte
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - docker/install-dc
      - apt-install-yarn
      - apt-install-chrome
      - yarn-install
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            source $NVM_DIR/nvm.sh
            nvm install stable
            cd ${MAGMA_ROOT}/nms/app/packages/magmalte
            ./e2e_test_setup.sh
      - store_artifacts:
          path: /tmp/nms_artifacts

      - magma_slack_notify

  nms-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - NMS_ROOT=${MAGMA_ROOT}/nms/app/packages/magmalte
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - docker/install-dc
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/nms/app/packages/magmalte
            docker-compose build magmalte
      - tag-push-docker:
          project: magmalte
          images: "magmalte"
      - persist-githash-version:
          file_prefix: nms
      - notify-magma:
          artifact_name: NMS
          version_path: versions/nms_version
      - magma_slack_notify

  ### FOSSA

  fossa-analyze:
    docker:
      - image: circleci/buildpack-deps:xenial
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
    steps:
      - checkout
      - run: wget https://github.com/fossas/fossa-cli/releases/download/v1.0.11/fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: bash -c 'sha256sum fossa-cli_1.0.11_linux_amd64.tar.gz | grep -q 0e20286630a9bc5a17408c81e6ba9003f91a14fdd680b96ca4def400693e028e'
      - run: rm -f /tmp/magma/fossa
      - run: tar xzf fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: sudo cp /tmp/magma/fossa /usr/local/bin/
      - run: sudo ${MAGMA_ROOT}/circleci/fossa-analyze-go.sh
      - magma_slack_notify

  ### DOCUSAURUS

  docusaurus_build_and_deploy:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - run:
          name: Setup docusaurus expected directory structure
          command: |
            mv docs/docusaurus website/
            mv docs/readmes readmes/
            rm -rf docs/
            mv readmes/ docs/
      # Yeah I fucked up and created mamga-... instead of magma-... oops
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "mamga-docusaurus-bot@users.noreply.github.com"
            git config --global user.name "mamga-docusaurus-bot"
            echo "machine github.com login mamga-docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc
            cd website && yarn install
            CUSTOM_COMMIT_MESSAGE="[skip ci] Deploy website" GIT_USER=mamga-docusaurus-bot yarn run publish-gh-pages

  ### XWF

  xwfm-test:
    parameters:
      notify_magma_ci:
        description: "should run magma_slack_notify for #magma_ci channel"
        type: boolean
        default: true
      notify_xwfm_ci:
        description: "should run magma_slack_notify for #xwfm_ci channel"
        type: boolean
        default: true
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: Loading openvswitch kernel module
          command: sudo modprobe openvswitch
      - run:
          name: Setup Environment Variables
          command: |
            echo export MAGMA_ROOT=$(pwd) >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv XWF_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv XWF_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - run:
          command: |
            env
            docker login -u ${XWF_ARTIFACTORY_USER} -p ${XWF_ARTIFACTORY_API_KEY} ${XWF_ARTIFACTORY_LINK}
            cd ${MAGMA_ROOT}/xwf/docker/
            docker-compose pull || true
            docker-compose build --parallel && docker-compose up -d && docker exec tests pytest --log-cli-level=info code/tests.py --type=analytic
      - when:
          condition: <<parameters.notify_magma_ci>>
          steps: magma_slack_notify
      - when:
          condition: <<parameters.notify_xwfm_ci>>
          steps:
            - magma_slack_notify:
                channel: "#xwfm_ci"

  xwfm-deploy:
    parameters:
      tag:
        description: Containers tag
        type: string
        default: ${CIRCLE_SHA1:0:8}
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: Build xwf go radius
          command: |
            cd ${MAGMA_ROOT}/feg
            docker build --build-arg BUILD_NUM=${CIRCLE_SHA1:0:8} --tag goradius -f radius/src/Dockerfile ./
      - tag-push-docker:
          images: 'goradius'
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
      - run:
          name: Load openvswitch kernel module for xwf integ test
          command: sudo modprobe openvswitch
      - run:
          name: Build xwfm-integ-tests
          command: |
            cd ${MAGMA_ROOT}
            docker build --tag xwfm-integ-tests -f xwf/gateway/integ_tests/gw/Dockerfile ./
      - tag-push-docker:
          images: 'xwfm-integ-tests'
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
      - magma_slack_notify

workflows:
  version: 2.1

  cloud:
    jobs:
      - cloud-test
      - insync-checkin
      - orc8r-build:
          requires:
            - cloud-test
            - insync-checkin

  lib_gateway:
    jobs:
      - orc8r-gateway-test

  agw:
    jobs:
      - agw-hold:
          type: approval
      - lte-agw-deploy:
          requires:
            - agw-hold

  feg:
    jobs:
      - feg-precommit
      - feg-build:
          requires:
            - feg-precommit

  cwag:
    jobs:
      - cwag-precommit
      - cwf-integ-test:
          <<: *master_and_develop
      - xwfm-test:
          <<: *master_and_develop
      - cwag-deploy:
          <<: *only_master
          requires:
            - cwag-precommit
            - cwf-integ-test
      - xwfm-deploy:
          <<: *only_master
          requires:
            - xwfm-test
            - cwag-deploy


  cwf_operator:
    jobs:
      - cwf-operator-precommit
      - cwf-operator-build:
          requires:
            - cwf-operator-precommit

  hourly_xwfm:
    triggers:
      - schedule:
          cron: "0 * * * *"
          <<: *only_master
    jobs:
      - xwfm-test:
          notify_magma_ci: false
      - xwfm-deploy:
          requires:
            - xwfm-test
          tag: 'hourly'
      - cwag-deploy:
          requires:
            - xwfm-test
          images: 'gateway_python|gateway_pipelined'
          tag: 'hourly'

  nms:
    jobs:
      - nms-flow-test
      - eslint
      - nms-yarn-test:
          requires:
            - nms-flow-test
      - nms-e2e-test:
          requires:
            - nms-flow-test
            - eslint
            - nms-yarn-test
      - nms-build:
          requires:
            - nms-flow-test
            - eslint
            - nms-yarn-test
            - nms-e2e-test

  docusaurus:
   jobs:
    - docusaurus_build_and_deploy:
        <<: *only_master

  fossa:
    jobs:
      - fossa-analyze:
          <<: *only_master
